#lang racket
(define (make-rat n d)
  (cons ((if (< d 0) - +) n)
        (abs d)))
(define (numer x) (car x))
(define (denom x) (cdr x))
(define (add-rat x y)
(make-rat (+ (* (numer x) (denom y))
             (* (numer y) (denom x)))
            (* (denom x) (denom y))))
(define (sub-rat x y)
(make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))
(define (mul-rat x y)
(make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))
(define (div-rat x y)
(make-rat (* (numer x) (denom y))
            (* (denom x) (numer y))))
(define (equal-rat? x y)
(= (* (numer x) (denom y))
     (* (numer y) (denom x))))
(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))
(define one-half (make-rat 1 2))
(define minus-one-half (make-rat 1 -2))
(print-rat minus-one-half)
(print-rat one-half)

