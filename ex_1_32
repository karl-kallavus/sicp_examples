(define (accumulate combiner null-value term a next b)
  (if (> a b)
      null-value
      (combiner (term a)
                (accumulate combiner null-value term (next a) next b))))

(define (accumulate-iter combiner null-value term a next b)
  (define (iter result n)
      (if (> n b)
          result
          (iter (combiner result (term n)) (next n))))
  (iter null-value a))

(define (sum term a next b)
  (if (> a b)
      0
      (+ (term a)
         (sum term (next a) next b))))

(define (product term a next b) 
     (if (> a b) 
        1 
        (* (term a) 
           (product term (next a) next b)))) 



(define (identity x) x) 
(define (next x) (+ x 1)) 
(define (factorial n)
  (product identity 1 next n))

(define (fact-accum n)
  (accumulate-iter * 1 identity 1 next n))

(factorial 7)
(fact-accum 7)
